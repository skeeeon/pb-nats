// Package pbnats provides seamless integration between PocketBase and NATS server
// by automatically generating and updating NATS MQTT authentication configuration.
package pbnats

// Event types for audit logging and filtering
const (
	// User record events
	EventTypeUserCreate = "user_create"
	EventTypeUserUpdate = "user_update"
	EventTypeUserDelete = "user_delete"

	// Role record events
	EventTypeRoleCreate = "role_create"
	EventTypeRoleUpdate = "role_update"
	EventTypeRoleDelete = "role_delete"

	// Default collection names
	DefaultUserCollectionName = "nats_users"
	DefaultRoleCollectionName = "nats_roles"
)

// User fields defines the expected field names in the user collection
var UserFields = struct {
	Username string
	Password string
	RoleID   string
	Active   string
}{
	Username: "username",
	Password: "password", // Should be stored as bcrypt hashed
	RoleID:   "role_id",  // References mqtt_roles collection
	Active:   "active",   // Boolean field
}

// Role fields defines the expected field names in the role collection
var RoleFields = struct {
	Name                string
	PublishPermissions  string
	SubscribePermissions string
}{
	Name:                "name",
	PublishPermissions:  "publish_permissions",  // JSON array of strings
	SubscribePermissions: "subscribe_permissions", // JSON array of strings
}

// NATS configuration template
const NatsConfigTemplate = `
# Authentication Configuration
# Auto-generated by pb-nats
# Generated at: {{ .Timestamp }}

authorization {
  # Default permissions applied to all users
  default_permissions = {
    publish = {{ .DefaultPublish }}
    subscribe = {{ .DefaultSubscribe }}
  }

  # Role definitions
  {{ range .Roles }}
  {{ .Name }} = {
    publish = {{ .PublishPermissions }}
    subscribe = {{ .SubscribePermissions }}
  }
  {{ end }}

  # User definitions
  users = [
    {{ range .Users }}
    {user: {{ .Username }}, password: "{{ .Password }}", permissions: ${{ .RoleName }}}{{ if not .IsLast }},{{ end }}
    {{ end }}
  ]
}
`
